# -*- coding: utf-8 -*-
"""Threading_PortChecker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wd_1JiR4GJuQfBLC47yJoeyud5BxfOCh
"""

import logging
import threading
import time
import socket
import matplotlib.pyplot as plt
import numpy as np

host = "www.unipolidgo.edu.mx" # Se cambia a una dirección IP válida o un nombre de host válido
Tread1_range = range(1, 1000)
Tread2_range = range(1001, 2000)
Tread3_range = range(2001, 3000)
Tread4_range = range(3001, 4000)

foundT1 = 0
foundT2 = 0
foundT3 = 0
foundT4 = 0

def check_port(port):
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.settimeout(0.1) # Set a timeout to avoid blocking
    result = s.connect_ex((host, port))
    if result == 0:
      return True
    else:
      return False

def thread_function(name):
  global foundT1, foundT2, foundT3
  if name == 1:
    print(f"Thread 1 Searching ports.")
    for portT1 in Tread1_range:
      if check_port(portT1):
        print(f"Port {portT1} is open." + " Found in thread 1")
        foundT1 += 1
  elif name == 2:
    print(f"Thread 2 Searching ports.")
    for portT2 in Tread2_range:
      if check_port(portT2):
        print(f"Port {portT2} is open." + " Found in thread 2")
        foundT2 += 1
  elif name == 3:
    print(f"Thread 3 Searching ports.")
    for portT3 in Tread3_range:
      if check_port(portT3):
        print(f"Port {portT3} is open." + " Found in thread 3")
        foundT3 += 1
  elif name == 4:
    print(f"Thread 4 Searching ports.")
    for portT4 in Tread4_range:
      if check_port(portT4):
        print(f"Port {portT4} is open." + " Found in thread 4")
        foundT4 += 1
  time.sleep(1)

if __name__ =="__main__":

  t1 = threading.Thread(target=thread_function, args=(1, ))
  t2 = threading.Thread(target=thread_function, args=(2, ))
  t3 = threading.Thread(target=thread_function, args=(3, ))
  t4 = threading.Thread(target=thread_function, args=(4, ))

  t1.start()
  t2.start()
  t3.start()
  t4.start()

  t1.join()
  t2.join()
  t3.join()
  t4.join()

  x = np.array(["T1", "T2", "T3","T4"])
  y = np.array([foundT1,foundT2,foundT3,foundT4])

  plt.bar(x,y)
  plt.show()